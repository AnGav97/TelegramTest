AudioWorkletProcessor.prototype._i=function(){this._j=true;this.port.onmessage=(_k)=>{if(_k.data==="kill")this._j=false;};};class _l extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._i();}process(_m,_n,parameters){const input=_m[0];const bypass=parameters.bypass;for(let _o=0;_o<input.length;++_o){const _p=input[_o];for(let _q=0;_q<_p.length;++_q){const _r=(bypass[_q]!==undefined)?bypass[_q]:bypass[0];
_n[_r][_o][_q]=_p[_q];}}return this._j;}}class _s extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._i();}process(_m,_n,parameters){const _t=_m[0];const _u=_m[1];const output=_n[0];const gain=parameters.gain;for(let _o=0;_o<_u.length;++_o){const _p=_u[_o];const _v=output[_o];for(let _q=0;_q<_p.length;++_q)_v[_q]=_p[_q];}for(let _o=0;_o<_t.length;++_o){const _p=_t[_o];const _v=output[_o];for(let _q=0;_q<_p.length;
++_q){const _w=(gain[_q]!==undefined)?gain[_q]:gain[0];_v[_q]+=_p[_q]*_w;}}return this._j;}}registerProcessor("audio-bus-input",_l);registerProcessor("audio-bus-output",_s);class _x extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",
defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _y=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_z){super();this._i();const _A=_z.outputChannelCount[0];this._B=new Float32Array(_A);this._C=new Uint32Array(_A);}process(_m,_n,parameters){const input=_m[0];const output=_n[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;
const mix=parameters.mix;for(let _o=0;_o<input.length;++_o){const _p=input[_o];const _v=output[_o];for(let _q=0;_q<_p.length;++_q){_v[_q]=_p[_q];if(this._C[_o]===0)this._B[_o]=_p[_q];const _D=(factor[_q]!==undefined)?factor[_q]:factor[0];++this._C[_o];this._C[_o]%=_D;const _r=(bypass[_q]!==undefined)?bypass[_q]:bypass[0];if(_r>0.0){continue;}let _E=this._B[_o];const _w=(gain[_q]!==undefined)?gain[_q]:gain[0];_E*=_w;_E=Math.max(Math.min(_E,1.0),-1.0);const _F=(resolution[_q]!==undefined)?resolution[_q]:resolution[0];
const max=(_E>0.0)?_x._y[_F]-1:_x._y[_F];_E=Math.round(_E*max)/max;const _G=(mix[_q]!==undefined)?mix[_q]:mix[0];_v[_q]*=(1.0-_G);_v[_q]+=(_E*_G);}}return this._j;}}registerProcessor("bitcrusher-processor",_x);class _H{constructor(_I=1e-3){this.setTime(_I);}setTime(_I){this._J=Math.exp(-1/(_I*sampleRate));}process(_K,_L){return _K+this._J*(_L-_K);}}class _M{constructor(_N,_O){this._P=new _H(_N);this._Q=new _H(_O);this._R=_N;this._S=_O;}_T(_I){if(_I===this._R)return;this._P.setTime(_I);this._R=_I;}_U(_I){
if(_I===this._S)return;this._Q.setTime(_I);this._S=_I;}process(_K,_L){if(_K>_L)return this._P.process(_K,_L);else return this._Q.process(_K,_L);}}class _V extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,
minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_W){super();this._i();const _P=_V.parameterDescriptors.find(_X=>_X.name==="attack");const _Q=_V.parameterDescriptors.find(_X=>_X.name==="release");this._Y=new _M(_P.defaultValue,_Q.defaultValue);this._Z=0;}process(__,_01,_11){const input=__[0];
const output=_01[0];const bypass=_11.bypass;const ingain=_11.ingain;const outgain=_11.outgain;const threshold=_11.threshold;const ratio=_11.ratio;const attack=_11.attack;const release=_11.release;if(input.length===0)return this._j;for(let _q=0;_q<input[0].length;++_q){let _21=input.map(_31=>_31[_q]);output.forEach((_31,_41)=>{_31[_q]=_21[_41];});const _51=(ingain[_q]!==undefined)?ingain[_q]:ingain[0];_21=_21.map(_61=>_61*=_51);const rect=_21.map(_61=>Math.abs(_61));const max=Math.max(...rect);const _71=_81(max);
const _91=(threshold[_q]!==undefined)?threshold[_q]:threshold[0];const _a1=_81(_91);const _b1=Math.max(0,_71-_a1);const _P=(attack[_q]!==undefined)?attack[_q]:attack[0];const _Q=(release[_q]!==undefined)?release[_q]:release[0];this._Y._T(_P);this._Y._U(_Q);this._Z=this._Y.process(_b1,this._Z);const _r=(bypass[_q]!==undefined)?bypass[_q]:bypass[0];if(_r>0)continue;const _F=(ratio[_q]!==undefined)?ratio[_q]:ratio[0];const _c1=(this._Z/_F)-this._Z;const _w=_d1(_c1);_21=_21.map(_61=>_61*=_w);const _e1=(outgain[_q]!==undefined)?outgain[_q]:outgain[0];
_21=_21.map(_61=>_61*=_e1);output.forEach((_31,_41)=>{_31[_q]=_21[_41];});}return this._j;}}function _81(_f1){return 20*Math.log10(_f1);}function _d1(_f1){return Math.pow(10,_f1/20);}registerProcessor("compressor-processor",_V);class _g1 extends AudioWorkletProcessor{static _h1=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_g1._h1},{name:"feedback",automationRate:"a-rate",
defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_z){super();this._i();const _A=_z.outputChannelCount[0];const _i1=(_g1._h1*sampleRate)+1;this.buffer=new Array(_A);this._j1=new Uint32Array(_A);for(let _o=0;_o<_A;++_o)this.buffer[_o]=new Float32Array(_i1);}process(_m,_n,parameters){const input=_m[0];const output=_n[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;
for(let _o=0;_o<input.length;++_o){const _p=input[_o];const _v=output[_o];for(let _q=0;_q<_p.length;++_q){_v[_q]=_p[_q];const _91=(time[_q]!==undefined)?time[_q]:time[0];const _k1=this._l1(_o,_91);const _D=(feedback[_q]!==undefined)?feedback[_q]:feedback[0];const _m1=_p[_q]+(_k1*_D);this.write(_o,_m1);const _r=(bypass[_q]!==undefined)?bypass[_q]:bypass[0];if(_r>0.0){continue;}const _G=(mix[_q]!==undefined)?mix[_q]:mix[0];_v[_q]*=(1-_G);_v[_q]+=(_k1*_G);}}return this._j;}_l1(_n1,_I){const _o1=_I*sampleRate;let _p1=(this._j1[_n1]-~~_o1);
let _q1=(_p1-1);while(_p1<0)_p1+=this.buffer[_n1].length;while(_q1<0)_q1+=this.buffer[_n1].length;const _r1=_o1-~~_o1;const _s1=this.buffer[_n1][_p1];const _t1=this.buffer[_n1][_q1];return _s1+(_t1-_s1)*_r1;}write(_n1,_u1){++this._j1[_n1];this._j1[_n1]%=this.buffer[_n1].length;this.buffer[_n1][this._j1[_n1]]=_u1;}}registerProcessor("delay-processor",_g1);class _v1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._i();}process(_w1,_x1,_y1){const input=_w1[0];
const _z1=_x1[0];const _A1=_x1[1];for(let _o=0;_o<input.length;++_o){const _p=input[_o];const _B1=_z1[_o];const _C1=_A1[_o];for(let _q=0;_q<_p.length;++_q){_B1[_q]=_p[_q];_C1[_q]=_p[_q];}}return this._j;}}class _D1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._i();}process(_w1,_x1,_y1){const _t=_w1[0];const _u=_w1[1];const output=_x1[0];const bypass=_y1.bypass;for(let _o=0;_o<_u.length;
++_o){const _E1=_t[_o];const _F1=_u[_o];const _v=output[_o];for(let _q=0;_q<_E1.length;++_q){const _r=(bypass[_q]!==undefined)?bypass[_q]:bypass[0];if(_r>0){_v[_q]=_F1[_q];}else {_v[_q]=_E1[_q];}}}return this._j;}}registerProcessor("eq-input",_v1);registerProcessor("eq-output",_D1);class _G1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){
super();this._i();}process(_m,_n,parameters){const input=_m[0];const output=_n[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _o=0;_o<input.length;++_o){const _p=input[_o];const _v=output[_o];for(let _q=0;_q<_p.length;++_q){_v[_q]=_p[_q];const _r=(bypass[_q]!==undefined)?bypass[_q]:bypass[0];if(_r>0.0){continue;}const _w=(gain[_q]!==undefined)?gain[_q]:gain[0];_v[_q]*=_w;}}return this._j;}}registerProcessor("gain-processor",_G1);class _H1 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _I1=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_I1),minValue:10.0,maxValue:_I1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_z){super();this._i();const _A=_z.outputChannelCount[0];this._J1=0;this._K1=0;this._L1=0;this._M1=0;this._N1=0;this._O1=new Float32Array(_A);
this._P1=new Float32Array(_A);this._Q1=new Float32Array(_A);this._R1=new Float32Array(_A);this._S1=-1;this._T1=-1;this._U1=-1;}process(_m,_n,parameters){const input=_m[0];const output=_n[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _V1=(freq.length===1&&q.length===1&&gain.length===1);if(_V1)this._W1(freq[0],q[0],gain[0]);for(let _o=0;_o<input.length;++_o){const _p=input[_o];const _v=output[_o];for(let _q=0;_q<_p.length;++_q){if(_V1===!1){const _D=(freq[_q]!==undefined)?freq[_q]:freq[0];
const _X1=(q[_q]!==undefined)?q[_q]:q[0];const _w=(gain[_q]!==undefined)?gain[_q]:gain[0];this._W1(_D,_X1,_w);}const _Y1=this._L1*_p[_q]+this._M1*this._O1[_o]+this._N1*this._P1[_o]-this._J1*this._Q1[_o]-this._K1*this._R1[_o];this._P1[_o]=this._O1[_o];this._O1[_o]=_p[_q];this._R1[_o]=this._Q1[_o];this._Q1[_o]=_Y1;const _r=(bypass[_q]!==undefined)?bypass[_q]:bypass[0];_v[_q]=(_r>0)?_p[_q]:_Y1;}}return this._j;}_W1(_Z1,__1,_02){if(_Z1===this._S1&&__1===this._T1&&_02===this._U1)return;const _12=2*Math.PI*_Z1/sampleRate;
const _22=Math.cos(_12);const _32=Math.sqrt(_02);const _42=_32+1;const _52=_32-1;const _62=_42*_22;const _72=_52*_22;const _82=_42-_72;const _92=_42+_72;const alpha=Math.sin(_12)/(2*__1);const _a2=(2*Math.sqrt(_32)*alpha);const _b2=_82+_a2;const _J1=2*(_52-_62);const _K1=_82-_a2;const _L1=_32*(_92+_a2);const _M1=-2*_32*(_52+_62);const _N1=_32*(_92-_a2);this._J1=_J1/_b2;this._K1=_K1/_b2;this._L1=_L1/_b2;this._M1=_M1/_b2;this._N1=_N1/_b2;this._S1=_Z1;this._T1=__1;this._U1=_02;}}registerProcessor("hi-shelf-processor",
_H1);class _c2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _d2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_d2),minValue:10.0,maxValue:_d2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_z){super();this._i();const _A=_z.outputChannelCount[0];this._J1=0;this._K1=0;this._L1=0;this._M1=0;this._N1=0;this._O1=new Float32Array(_A);
this._P1=new Float32Array(_A);this._Q1=new Float32Array(_A);this._R1=new Float32Array(_A);this._e2=-1;this._T1=-1;}process(_m,_n,parameters){const input=_m[0];const output=_n[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _V1=(cutoff.length===1&&q.length===1);if(_V1)this._W1(cutoff[0],q[0]);for(let _o=0;_o<input.length;++_o){const _p=input[_o];const _v=output[_o];for(let _q=0;_q<_p.length;++_q){if(_V1===!1){const _o=(cutoff[_q]!==undefined)?cutoff[_q]:cutoff[0];const _X1=(q[_q]!==undefined)?q[_q]:q[0];
this._W1(_o,_X1);}const _Y1=this._L1*_p[_q]+this._M1*this._O1[_o]+this._N1*this._P1[_o]-this._J1*this._Q1[_o]-this._K1*this._R1[_o];this._P1[_o]=this._O1[_o];this._O1[_o]=_p[_q];this._R1[_o]=this._Q1[_o];this._Q1[_o]=_Y1;const _r=(bypass[_q]!==undefined)?bypass[_q]:bypass[0];_v[_q]=(_r>0)?_p[_q]:_Y1;}}return this._j;}_W1(_f2,__1){if(_f2===this._e2&&__1===this._T1)return;const _12=2*Math.PI*_f2/sampleRate;const alpha=Math.sin(_12)/(2*__1);const _22=Math.cos(_12);const _b2=1+alpha;const _J1=-2*_22;const _K1=1-alpha;
const _L1=(1+_22)/2;const _M1=-1-_22;const _N1=(1+_22)/2;this._J1=_J1/_b2;this._K1=_K1/_b2;this._L1=_L1/_b2;this._M1=_M1/_b2;this._N1=_N1/_b2;this._e2=_f2;this._T1=__1;}}registerProcessor("hpf2-processor",_c2);class _g2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _I1=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_I1),minValue:10.0,maxValue:_I1},{name:"q",automationRate:"a-rate",
defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_z){super();this._i();const _A=_z.outputChannelCount[0];this._J1=0;this._K1=0;this._L1=0;this._M1=0;this._N1=0;this._O1=new Float32Array(_A);this._P1=new Float32Array(_A);this._Q1=new Float32Array(_A);this._R1=new Float32Array(_A);this._S1=-1;this._T1=-1;this._U1=-1;}process(_m,_n,parameters){const input=_m[0];const output=_n[0];const bypass=parameters.bypass;const freq=parameters.freq;
const q=parameters.q;const gain=parameters.gain;const _V1=(freq.length===1&&q.length===1&&gain.length===1);if(_V1)this._W1(freq[0],q[0],gain[0]);for(let _o=0;_o<input.length;++_o){const _p=input[_o];const _v=output[_o];for(let _q=0;_q<_p.length;++_q){if(_V1===!1){const _D=(freq[_q]!==undefined)?freq[_q]:freq[0];const _X1=(q[_q]!==undefined)?q[_q]:q[0];const _w=(gain[_q]!==undefined)?gain[_q]:gain[0];this._W1(_D,_X1,_w);}const _Y1=this._L1*_p[_q]+this._M1*this._O1[_o]+this._N1*this._P1[_o]-this._J1*this._Q1[_o]-this._K1*this._R1[_o];
this._P1[_o]=this._O1[_o];this._O1[_o]=_p[_q];this._R1[_o]=this._Q1[_o];this._Q1[_o]=_Y1;const _r=(bypass[_q]!==undefined)?bypass[_q]:bypass[0];_v[_q]=(_r>0)?_p[_q]:_Y1;}}return this._j;}_W1(_Z1,__1,_02){if(_Z1===this._S1&&__1===this._T1&&_02===this._U1)return;const _12=2*Math.PI*_Z1/sampleRate;const _22=Math.cos(_12);const _32=Math.sqrt(_02);const _42=_32+1;const _52=_32-1;const _62=_42*_22;const _72=_52*_22;const _82=_42-_72;const _92=_42+_72;const alpha=Math.sin(_12)/(2*__1);const _a2=(2*Math.sqrt(_32)*alpha);
const _b2=_92+_a2;const _J1=-2*(_52+_62);const _K1=_92-_a2;const _L1=_32*(_82+_a2);const _M1=2*_32*(_52-_62);const _N1=_32*(_82-_a2);this._J1=_J1/_b2;this._K1=_K1/_b2;this._L1=_L1/_b2;this._M1=_M1/_b2;this._N1=_N1/_b2;this._S1=_Z1;this._T1=__1;this._U1=_02;}}registerProcessor("lo-shelf-processor",_g2);class _h2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _d2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",
defaultValue:Math.min(500.0,_d2),minValue:10.0,maxValue:_d2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_z){super();this._i();const _A=_z.outputChannelCount[0];this._J1=0;this._K1=0;this._L1=0;this._M1=0;this._N1=0;this._O1=new Float32Array(_A);this._P1=new Float32Array(_A);this._Q1=new Float32Array(_A);this._R1=new Float32Array(_A);this._e2=-1;this._T1=-1;}process(_m,_n,parameters){const input=_m[0];const output=_n[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;
const q=parameters.q;const _V1=(cutoff.length===1&&q.length===1);if(_V1)this._W1(cutoff[0],q[0]);for(let _o=0;_o<input.length;++_o){const _p=input[_o];const _v=output[_o];for(let _q=0;_q<_p.length;++_q){if(_V1===!1){const _o=(cutoff[_q]!==undefined)?cutoff[_q]:cutoff[0];const _X1=(q[_q]!==undefined)?q[_q]:q[0];this._W1(_o,_X1);}const _Y1=this._L1*_p[_q]+this._M1*this._O1[_o]+this._N1*this._P1[_o]-this._J1*this._Q1[_o]-this._K1*this._R1[_o];this._P1[_o]=this._O1[_o];this._O1[_o]=_p[_q];this._R1[_o]=this._Q1[_o];
this._Q1[_o]=_Y1;const _r=(bypass[_q]!==undefined)?bypass[_q]:bypass[0];_v[_q]=(_r>0)?_p[_q]:_Y1;}}return this._j;}_W1(_f2,__1){if(_f2===this._e2&&__1===this._T1)return;const _12=2*Math.PI*_f2/sampleRate;const alpha=Math.sin(_12)/(2*__1);const _22=Math.cos(_12);const _b2=1+alpha;const _J1=-2*_22;const _K1=1-alpha;const _L1=(1-_22)/2;const _M1=1-_22;const _N1=(1-_22)/2;this._J1=_J1/_b2;this._K1=_K1/_b2;this._L1=_L1/_b2;this._M1=_M1/_b2;this._N1=_N1/_b2;this._e2=_f2;this._T1=__1;}}registerProcessor("lpf2-processor",
_h2);class _i2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _I1=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_I1),minValue:10.0,maxValue:_I1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_z){super();this._i();const _A=_z.outputChannelCount[0];
this._J1=0;this._K1=0;this._L1=0;this._M1=0;this._N1=0;this._O1=new Float32Array(_A);this._P1=new Float32Array(_A);this._Q1=new Float32Array(_A);this._R1=new Float32Array(_A);this._S1=-1;this._T1=-1;this._U1=-1;}process(_m,_n,parameters){const input=_m[0];const output=_n[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _V1=(freq.length===1&&q.length===1&&gain.length===1);if(_V1)this._W1(freq[0],q[0],gain[0]);for(let _o=0;_o<input.length;++_o){
const _p=input[_o];const _v=output[_o];for(let _q=0;_q<_p.length;++_q){if(_V1===!1){const _D=(freq[_q]!==undefined)?freq[_q]:freq[0];const _X1=(q[_q]!==undefined)?q[_q]:q[0];const _w=(gain[_q]!==undefined)?gain[_q]:gain[0];this._W1(_D,_X1,_w);}const _Y1=this._L1*_p[_q]+this._M1*this._O1[_o]+this._N1*this._P1[_o]-this._J1*this._Q1[_o]-this._K1*this._R1[_o];this._P1[_o]=this._O1[_o];this._O1[_o]=_p[_q];this._R1[_o]=this._Q1[_o];this._Q1[_o]=_Y1;const _r=(bypass[_q]!==undefined)?bypass[_q]:bypass[0];_v[_q]=(_r>0)?_p[_q]:_Y1;
}}return this._j;}_W1(_Z1,__1,_02){if(_Z1===this._S1&&__1===this._T1&&_02===this._U1)return;const _12=2*Math.PI*_Z1/sampleRate;const _22=Math.cos(_12);const _32=Math.sqrt(_02);const alpha=Math.sin(_12)/(2*__1);const _j2=alpha/_32;const _k2=alpha*_32;const _b2=1+_j2;const _J1=-2*_22;const _K1=1-_j2;const _L1=1+_k2;const _M1=_J1;const _N1=1-_k2;this._J1=_J1/_b2;this._K1=_K1/_b2;this._L1=_L1/_b2;this._M1=_M1/_b2;this._N1=_N1/_b2;this._S1=_Z1;this._T1=__1;this._U1=_02;}}registerProcessor("peak-eq-processor",_i2);
class _l2{constructor(_m2){this._n2=0;this._o2=0;this.feedback=0;this._p2=0;this.buffer=new Float32Array(_m2);this._q2=0;}process(_u1){const out=this.buffer[this._q2];this._p2=(this._p2*this._n2)+(out*this._o2);this.buffer[this._q2]=_u1+(this._p2*this.feedback);++this._q2;this._q2%=this.buffer.length;return out;}_r2(_s2){this.feedback=Math.min(Math.max(0,_s2),1);}_t2(_u2){this._n2=Math.min(Math.max(0,_u2),1);this._o2=1-this._n2;}}class _v2{constructor(_m2){this.feedback=0;this.buffer=new Float32Array(_m2);
this._q2=0;}process(_u1){const out=this.buffer[this._q2];this.buffer[this._q2]=_u1+(out*this.feedback);++this._q2;this._q2%=this.buffer.length;return(out-_u1);}_r2(_s2){this.feedback=Math.min(Math.max(0,_s2),1);}}class _w2 extends AudioWorkletProcessor{static _x2=8;static _y2=4;static _z2=0.015;static _A2=0.4;static _B2=0.28;static _C2=0.7;static _D2=[1116,1188,1277,1356,1422,1491,1557,1617];static _E2=[1139,1211,1300,1379,1445,1514,1580,1640];static _F2=[556,441,341,225];static _G2=[579,464,364,248];static get parameterDescriptors(){
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_z){super();this._i();const _A=_z.outputChannelCount[0];this._H2=-1;this._I2=-1;this._J2=new Array(_A);this._K2=new Array(_A);const _L2=[_w2._D2,_w2._E2];const _M2=[_w2._F2,
_w2._G2];for(let _o=0;_o<_A;++_o){this._J2[_o]=new Array(_w2._x2);this._K2[_o]=new Array(_w2._y2);for(let _N2=0;_N2<_w2._x2;++_N2)this._J2[_o][_N2]=new _l2(_L2[_o%_L2.length][_N2]);for(let _N2=0;_N2<_w2._y2;++_N2)this._K2[_o][_N2]=new _v2(_M2[_o%_M2.length][_N2]);}this._O2(0.5);this._t2(0.5);for(let _o=0;_o<_A;++_o)for(let _N2=0;_N2<_w2._y2;++_N2)this._K2[_o][_N2]._r2(0.5);}process(_m,_n,parameters){const input=_m[0];const output=_n[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;
const mix=parameters.mix;for(let _o=0;_o<input.length;++_o){const _p=input[_o];const _v=output[_o];for(let _P2=0;_P2<_p.length;++_P2){const _q=(size[_P2]!==undefined)?size[_P2]:size[0];const _Q2=(damp[_P2]!==undefined)?damp[_P2]:damp[0];this._O2(_q);this._t2(_Q2);_v[_P2]=_p[_P2];let out=0;const _E=_p[_P2]*_w2._z2;for(let _N2=0;_N2<_w2._x2;++_N2)out+=this._J2[_o][_N2].process(_E);for(let _N2=0;_N2<_w2._y2;++_N2)out=this._K2[_o][_N2].process(out);const _r=(bypass[_P2]!==undefined)?bypass[_P2]:bypass[0];if(_r>0.0){
continue;}const _G=(mix[_P2]!==undefined)?mix[_P2]:mix[0];_v[_P2]*=(1-_G);_v[_P2]+=(out*_G);}}return this._j;}_O2(_m2){if(_m2===this._H2)return;const size=(_m2*_w2._B2)+_w2._C2;for(let _o=0;_o<this._J2.length;++_o)for(let _N2=0;_N2<_w2._x2;++_N2)this._J2[_o][_N2]._r2(size);this._H2=_m2;}_t2(_u2){if(_u2===this._I2)return;const damp=_u2*_w2._A2;for(let _o=0;_o<this._J2.length;++_o)for(let _N2=0;_N2<_w2._x2;++_N2)this._J2[_o][_N2]._t2(damp);this._I2=_u2;}}registerProcessor("reverb1-processor",_w2);class _R2 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_z){super();this._i();const _A=_z.outputChannelCount[0];
this._S2=new Array(_A).fill(1.0);this._T2=new Array(_A).fill(0.0);this._U2=new Array(_A).fill(_V2._W2._X2);this._Y2=new Array(_A);for(let _o=0;_o<_A;++_o){this._Y2[_o]=new _Z2();this._Y2[_o].__2(sampleRate);this._Y2[_o]._03(this._S2[_o]);this._Y2[_o]._13(this._U2[_o]);if(_o%2===1){this._Y2[_o]._23(this._T2[_o]);}}}process(_m,_n,parameters){const input=_m[0];const output=_n[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;
for(let _o=0;_o<input.length;++_o){const _p=input[_o];const _v=output[_o];for(let _q=0;_q<_p.length;++_q){_v[_q]=_p[_q];const _F=(rate[_q]!==undefined)?rate[_q]:rate[0];const _33=(offset[_q]!==undefined)?offset[_q]:offset[0];const _43=(shape[_q]!==undefined)?shape[_q]:shape[0];this._53(_o,_F,_33,_43);const _63=this._Y2[_o]._l1();const _r=(bypass[_q]!==undefined)?bypass[_q]:bypass[0];if(_r>0.0){continue;}const _N2=(intensity[_q]!==undefined)?intensity[_q]:intensity[0];const out=_p[_q]*_63*_N2;_v[_q]*=(1.0-_N2);
_v[_q]+=out;}}return this._j;}_53(_n1,_73,_83,_93){if(_73!==this._S2[_n1]){this._Y2[_n1]._03(_73);this._S2[_n1]=_73;}if(_83!==this._T2[_n1]){if(_n1%2===1){this._Y2[_n1]._23(_83);}this._T2[_n1]=_83;}if(_93!==this._U2[_n1]){this._Y2[_n1]._13(_93);this._U2[_n1]=_93;}}}registerProcessor("tremolo-processor",_R2);function _V2(){}_V2._W2={_X2:0,_a3:1,_b3:2,_c3:3,_d3:4,_e3:5};_V2._f3=function(_g3){return 1.0-_g3;};_V2._h3=function(_g3){return _g3;};_V2._i3=function(_g3){return 0.5*(Math.sin((_g3*2.0*Math.PI)-(Math.PI/2.0))+1.0);
};_V2._j3=function(_g3){if(_g3<0.5){return 0.0;}return 1.0;};_V2._k3=function(_g3){if(_g3<0.5){return 2.0*_g3;}return 2.0-(2.0*_g3);};_V2._l3=[_V2._f3,_V2._h3,_V2._i3,_V2._j3,_V2._k3];_m3._n3=512;_m3._o3=1.0/_m3._n3;function _m3(_p3){this.data=new Float32Array(_m3._n3);for(let _N2=0;_N2<_m3._n3;++_N2){this.data[_N2]=_p3(_N2*_m3._o3);}}_m3.prototype._l1=function(_g3){_g3=Math.max(0.0,_g3);_g3=Math.min(_g3,1.0);const _q3=_g3*_m3._n3;const _r3=~~_q3;const _s3=_q3-_r3;let _p1=_r3;let _q1=_p1+1;if(_p1>=_m3._n3){
_p1-=_m3._n3;}if(_q1>=_m3._n3){_q1-=_m3._n3;}const _s1=this.data[_p1];const _t1=this.data[_q1];return _s1+(_t1-_s1)*_s3;};_Z2._t3=[];_Z2._u3=!1;_Z2._v3=0.0;_Z2._I1=20.0;function _Z2(){this._w3=48000;this.shape=_V2._W2._b3;this.freq=1.0;this._x3=0.0;this._o3=0.0;this._y3=0.0;if(_Z2._u3==true){return;}for(let _N2=0;_N2<_V2._W2._e3;++_N2){_Z2._t3[_N2]=new _m3(_V2._l3[_N2]);}_Z2._u3=true;}_Z2._z3=function(){return(_Z2._u3==!0);};_Z2.prototype.__2=function(_A3){this._w3=_A3;this._B3();};_Z2.prototype._03=function(_Z1){
_Z1=Math.max(_Z2._v3,_Z1);_Z1=Math.min(_Z1,_Z2._I1);this.freq=_Z1;this._B3();};_Z2.prototype._23=function(_83){_83=Math.max(0.0,_83);_83=Math.min(_83,1.0);const _C3=_83-this._y3;this._y3=_83;this._x3+=_C3;while(this._x3>=1.0){this._x3-=1.0;}while(this._x3<0.0){this._x3+=1.0;}};_Z2.prototype._13=function(_93){_93=Math.max(0,_93);_93=Math.min(_93,_V2._W2._e3-1);this.shape=_93;};_Z2.prototype._l1=function(){const _D3=_Z2._t3[this.shape]._l1(this._x3);this._x3+=this._o3;while(this._x3>=1.0){this._x3-=1.0;
}return _D3;};_Z2.prototype._B3=function(){this._o3=this.freq/this._w3;};