AudioWorkletProcessor.prototype._N3=function(){this._O3=true;this.port.onmessage=(_P3)=>{if(_P3.data==="kill")this._O3=false;};};class _Q3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._N3();}process(_R3,_S3,parameters){const input=_R3[0];const bypass=parameters.bypass;for(let _T3=0;_T3<input.length;++_T3){const _U3=input[_T3];for(let _V3=0;_V3<_U3.length;++_V3){const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];
_S3[_W3][_T3][_V3]=_U3[_V3];}}return this._O3;}}class _X3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._N3();}process(_R3,_S3,parameters){const _Y3=_R3[0];const _Z3=_R3[1];const output=_S3[0];const gain=parameters.gain;for(let _T3=0;_T3<_Z3.length;++_T3){const _U3=_Z3[_T3];const __3=output[_T3];for(let _V3=0;_V3<_U3.length;++_V3)__3[_V3]=_U3[_V3];}for(let _T3=0;_T3<_Y3.length;++_T3){const _U3=_Y3[_T3];
const __3=output[_T3];for(let _V3=0;_V3<_U3.length;++_V3){const _04=(gain[_V3]!==undefined)?gain[_V3]:gain[0];__3[_V3]+=_U3[_V3]*_04;}}return this._O3;}}registerProcessor("audio-bus-input",_Q3);registerProcessor("audio-bus-output",_X3);class _14 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,
minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _24=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_34){super();this._N3();const _44=_34.outputChannelCount[0];this._54=new Float32Array(_44);this._64=new Uint32Array(_44);}process(_R3,_S3,parameters){const input=_R3[0];const output=_S3[0];const bypass=parameters.bypass;
const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let _T3=0;_T3<input.length;++_T3){const _U3=input[_T3];const __3=output[_T3];for(let _V3=0;_V3<_U3.length;++_V3){__3[_V3]=_U3[_V3];if(this._64[_T3]===0)this._54[_T3]=_U3[_V3];const _74=(factor[_V3]!==undefined)?factor[_V3]:factor[0];++this._64[_T3];this._64[_T3]%=_74;const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];if(_W3>0.0){continue;}let _84=this._54[_T3];const _04=(gain[_V3]!==undefined)?gain[_V3]:gain[0];
_84*=_04;_84=Math.max(Math.min(_84,1.0),-1.0);const _94=(resolution[_V3]!==undefined)?resolution[_V3]:resolution[0];const max=(_84>0.0)?_14._24[_94]-1:_14._24[_94];_84=Math.round(_84*max)/max;const _a4=(mix[_V3]!==undefined)?mix[_V3]:mix[0];__3[_V3]*=(1.0-_a4);__3[_V3]+=(_84*_a4);}}return this._O3;}}registerProcessor("bitcrusher-processor",_14);class _b4{constructor(_c4=1e-3){this.setTime(_c4);}setTime(_c4){this._d4=Math.exp(-1/(_c4*sampleRate));}process(_e4,_f4){return _e4+this._d4*(_f4-_e4);}}class _g4{
constructor(_h4,_i4){this._j4=new _b4(_h4);this._k4=new _b4(_i4);this._l4=_h4;this._m4=_i4;}_n4(_c4){if(_c4===this._l4)return;this._j4.setTime(_c4);this._l4=_c4;}_o4(_c4){if(_c4===this._m4)return;this._k4.setTime(_c4);this._m4=_c4;}process(_e4,_f4){if(_e4>_f4)return this._j4.process(_e4,_f4);else return this._k4.process(_e4,_f4);}}class _p4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",
defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_q4){super();this._N3();const _j4=_p4.parameterDescriptors.find(_r4=>_r4.name==="attack");
const _k4=_p4.parameterDescriptors.find(_r4=>_r4.name==="release");this._s4=new _g4(_j4.defaultValue,_k4.defaultValue);this._t4=0;}process(_u4,_v4,_w4){const input=_u4[0];const output=_v4[0];const bypass=_w4.bypass;const ingain=_w4.ingain;const outgain=_w4.outgain;const threshold=_w4.threshold;const ratio=_w4.ratio;const attack=_w4.attack;const release=_w4.release;if(input.length===0)return this._O3;for(let _V3=0;_V3<input[0].length;++_V3){let _x4=input.map(_y4=>_y4[_V3]);output.forEach((_y4,_z4)=>{_y4[_V3]=_x4[_z4];
});const _A4=(ingain[_V3]!==undefined)?ingain[_V3]:ingain[0];_x4=_x4.map(_B4=>_B4*=_A4);const rect=_x4.map(_B4=>Math.abs(_B4));const max=Math.max(...rect);const _C4=_D4(max);const _E4=(threshold[_V3]!==undefined)?threshold[_V3]:threshold[0];const _F4=_D4(_E4);const _G4=Math.max(0,_C4-_F4);const _j4=(attack[_V3]!==undefined)?attack[_V3]:attack[0];const _k4=(release[_V3]!==undefined)?release[_V3]:release[0];this._s4._n4(_j4);this._s4._o4(_k4);this._t4=this._s4.process(_G4,this._t4);const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];
if(_W3>0)continue;const _94=(ratio[_V3]!==undefined)?ratio[_V3]:ratio[0];const _H4=(this._t4/_94)-this._t4;const _04=_I4(_H4);_x4=_x4.map(_B4=>_B4*=_04);const _J4=(outgain[_V3]!==undefined)?outgain[_V3]:outgain[0];_x4=_x4.map(_B4=>_B4*=_J4);output.forEach((_y4,_z4)=>{_y4[_V3]=_x4[_z4];});}return this._O3;}}function _D4(_K4){return 20*Math.log10(_K4);}function _I4(_K4){return Math.pow(10,_K4/20);}registerProcessor("compressor-processor",_p4);class _L4 extends AudioWorkletProcessor{static _M4=5.0;static get parameterDescriptors(){
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_L4._M4},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_34){super();this._N3();const _44=_34.outputChannelCount[0];const _N4=(_L4._M4*sampleRate)+1;this.buffer=new Array(_44);this._O4=new Uint32Array(_44);for(let _T3=0;
_T3<_44;++_T3)this.buffer[_T3]=new Float32Array(_N4);}process(_R3,_S3,parameters){const input=_R3[0];const output=_S3[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let _T3=0;_T3<input.length;++_T3){const _U3=input[_T3];const __3=output[_T3];for(let _V3=0;_V3<_U3.length;++_V3){__3[_V3]=_U3[_V3];const _E4=(time[_V3]!==undefined)?time[_V3]:time[0];const _P4=this._Q4(_T3,_E4);const _74=(feedback[_V3]!==undefined)?feedback[_V3]:feedback[0];
const _R4=_U3[_V3]+(_P4*_74);this.write(_T3,_R4);const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];if(_W3>0.0){continue;}const _a4=(mix[_V3]!==undefined)?mix[_V3]:mix[0];__3[_V3]*=(1-_a4);__3[_V3]+=(_P4*_a4);}}return this._O3;}_Q4(_S4,_c4){const _T4=_c4*sampleRate;let _U4=(this._O4[_S4]-~~_T4);let _V4=(_U4-1);while(_U4<0)_U4+=this.buffer[_S4].length;while(_V4<0)_V4+=this.buffer[_S4].length;const _W4=_T4-~~_T4;const _X4=this.buffer[_S4][_U4];const _Y4=this.buffer[_S4][_V4];return _X4+(_Y4-_X4)*_W4;}
write(_S4,_Z4){++this._O4[_S4];this._O4[_S4]%=this.buffer[_S4].length;this.buffer[_S4][this._O4[_S4]]=_Z4;}}registerProcessor("delay-processor",_L4);class __4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._N3();}process(_05,_15,_25){const input=_05[0];const _35=_15[0];const _45=_15[1];for(let _T3=0;_T3<input.length;++_T3){const _U3=input[_T3];const _55=_35[_T3];const _65=_45[_T3];for(let _V3=0;_V3<_U3.length;++_V3){_55[_V3]=_U3[_V3];_65[_V3]=_U3[_V3];}}return this._O3;
}}class _75 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._N3();}process(_05,_15,_25){const _Y3=_05[0];const _Z3=_05[1];const output=_15[0];const bypass=_25.bypass;for(let _T3=0;_T3<_Z3.length;++_T3){const _85=_Y3[_T3];const _95=_Z3[_T3];const __3=output[_T3];for(let _V3=0;_V3<_85.length;++_V3){const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];if(_W3>0){__3[_V3]=_95[_V3];}else {
__3[_V3]=_85[_V3];}}}return this._O3;}}registerProcessor("eq-input",__4);registerProcessor("eq-output",_75);class _a5 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._N3();}process(_R3,_S3,parameters){const input=_R3[0];const output=_S3[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _T3=0;_T3<input.length;
++_T3){const _U3=input[_T3];const __3=output[_T3];for(let _V3=0;_V3<_U3.length;++_V3){__3[_V3]=_U3[_V3];const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];if(_W3>0.0){continue;}const _04=(gain[_V3]!==undefined)?gain[_V3]:gain[0];__3[_V3]*=_04;}}return this._O3;}}registerProcessor("gain-processor",_a5);class _b5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _c5=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",
defaultValue:Math.min(5000.0,_c5),minValue:10.0,maxValue:_c5},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_34){super();this._N3();const _44=_34.outputChannelCount[0];this._d5=0;this._e5=0;this._f5=0;this._g5=0;this._h5=0;this._i5=new Float32Array(_44);this._j5=new Float32Array(_44);this._k5=new Float32Array(_44);this._l5=new Float32Array(_44);this._m5=-1;this._n5=-1;this._o5=-1;}process(_R3,
_S3,parameters){const input=_R3[0];const output=_S3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _p5=(freq.length===1&&q.length===1&&gain.length===1);if(_p5)this._q5(freq[0],q[0],gain[0]);for(let _T3=0;_T3<input.length;++_T3){const _U3=input[_T3];const __3=output[_T3];for(let _V3=0;_V3<_U3.length;++_V3){if(_p5===!1){const _74=(freq[_V3]!==undefined)?freq[_V3]:freq[0];const _r5=(q[_V3]!==undefined)?q[_V3]:q[0];const _04=(gain[_V3]!==undefined)?gain[_V3]:gain[0];
this._q5(_74,_r5,_04);}const _s5=this._f5*_U3[_V3]+this._g5*this._i5[_T3]+this._h5*this._j5[_T3]-this._d5*this._k5[_T3]-this._e5*this._l5[_T3];this._j5[_T3]=this._i5[_T3];this._i5[_T3]=_U3[_V3];this._l5[_T3]=this._k5[_T3];this._k5[_T3]=_s5;const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];__3[_V3]=(_W3>0)?_U3[_V3]:_s5;}}return this._O3;}_q5(_t5,_u5,_v5){if(_t5===this._m5&&_u5===this._n5&&_v5===this._o5)return;const _w5=2*Math.PI*_t5/sampleRate;const _x5=Math.cos(_w5);const _y5=Math.sqrt(_v5);const _z5=_y5+1;
const _A5=_y5-1;const _B5=_z5*_x5;const _C5=_A5*_x5;const _D5=_z5-_C5;const _E5=_z5+_C5;const alpha=Math.sin(_w5)/(2*_u5);const _F5=(2*Math.sqrt(_y5)*alpha);const _G5=_D5+_F5;const _d5=2*(_A5-_B5);const _e5=_D5-_F5;const _f5=_y5*(_E5+_F5);const _g5=-2*_y5*(_A5+_B5);const _h5=_y5*(_E5-_F5);this._d5=_d5/_G5;this._e5=_e5/_G5;this._f5=_f5/_G5;this._g5=_g5/_G5;this._h5=_h5/_G5;this._m5=_t5;this._n5=_u5;this._o5=_v5;}}registerProcessor("hi-shelf-processor",_b5);class _H5 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _I5=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_I5),minValue:10.0,maxValue:_I5},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_34){super();this._N3();const _44=_34.outputChannelCount[0];this._d5=0;this._e5=0;this._f5=0;this._g5=0;this._h5=0;this._i5=new Float32Array(_44);this._j5=new Float32Array(_44);this._k5=new Float32Array(_44);
this._l5=new Float32Array(_44);this._J5=-1;this._n5=-1;}process(_R3,_S3,parameters){const input=_R3[0];const output=_S3[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _p5=(cutoff.length===1&&q.length===1);if(_p5)this._q5(cutoff[0],q[0]);for(let _T3=0;_T3<input.length;++_T3){const _U3=input[_T3];const __3=output[_T3];for(let _V3=0;_V3<_U3.length;++_V3){if(_p5===!1){const _T3=(cutoff[_V3]!==undefined)?cutoff[_V3]:cutoff[0];const _r5=(q[_V3]!==undefined)?q[_V3]:q[0];
this._q5(_T3,_r5);}const _s5=this._f5*_U3[_V3]+this._g5*this._i5[_T3]+this._h5*this._j5[_T3]-this._d5*this._k5[_T3]-this._e5*this._l5[_T3];this._j5[_T3]=this._i5[_T3];this._i5[_T3]=_U3[_V3];this._l5[_T3]=this._k5[_T3];this._k5[_T3]=_s5;const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];__3[_V3]=(_W3>0)?_U3[_V3]:_s5;}}return this._O3;}_q5(_K5,_u5){if(_K5===this._J5&&_u5===this._n5)return;const _w5=2*Math.PI*_K5/sampleRate;const alpha=Math.sin(_w5)/(2*_u5);const _x5=Math.cos(_w5);const _G5=1+alpha;
const _d5=-2*_x5;const _e5=1-alpha;const _f5=(1+_x5)/2;const _g5=-1-_x5;const _h5=(1+_x5)/2;this._d5=_d5/_G5;this._e5=_e5/_G5;this._f5=_f5/_G5;this._g5=_g5/_G5;this._h5=_h5/_G5;this._J5=_K5;this._n5=_u5;}}registerProcessor("hpf2-processor",_H5);class _L5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _c5=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_c5),minValue:10.0,
maxValue:_c5},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_34){super();this._N3();const _44=_34.outputChannelCount[0];this._d5=0;this._e5=0;this._f5=0;this._g5=0;this._h5=0;this._i5=new Float32Array(_44);this._j5=new Float32Array(_44);this._k5=new Float32Array(_44);this._l5=new Float32Array(_44);this._m5=-1;this._n5=-1;this._o5=-1;}process(_R3,_S3,parameters){const input=_R3[0];const output=_S3[0];
const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _p5=(freq.length===1&&q.length===1&&gain.length===1);if(_p5)this._q5(freq[0],q[0],gain[0]);for(let _T3=0;_T3<input.length;++_T3){const _U3=input[_T3];const __3=output[_T3];for(let _V3=0;_V3<_U3.length;++_V3){if(_p5===!1){const _74=(freq[_V3]!==undefined)?freq[_V3]:freq[0];const _r5=(q[_V3]!==undefined)?q[_V3]:q[0];const _04=(gain[_V3]!==undefined)?gain[_V3]:gain[0];this._q5(_74,_r5,_04);}const _s5=this._f5*_U3[_V3]+this._g5*this._i5[_T3]+this._h5*this._j5[_T3]-this._d5*this._k5[_T3]-this._e5*this._l5[_T3];
this._j5[_T3]=this._i5[_T3];this._i5[_T3]=_U3[_V3];this._l5[_T3]=this._k5[_T3];this._k5[_T3]=_s5;const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];__3[_V3]=(_W3>0)?_U3[_V3]:_s5;}}return this._O3;}_q5(_t5,_u5,_v5){if(_t5===this._m5&&_u5===this._n5&&_v5===this._o5)return;const _w5=2*Math.PI*_t5/sampleRate;const _x5=Math.cos(_w5);const _y5=Math.sqrt(_v5);const _z5=_y5+1;const _A5=_y5-1;const _B5=_z5*_x5;const _C5=_A5*_x5;const _D5=_z5-_C5;const _E5=_z5+_C5;const alpha=Math.sin(_w5)/(2*_u5);const _F5=(2*Math.sqrt(_y5)*alpha);
const _G5=_E5+_F5;const _d5=-2*(_A5+_B5);const _e5=_E5-_F5;const _f5=_y5*(_D5+_F5);const _g5=2*_y5*(_A5-_B5);const _h5=_y5*(_D5-_F5);this._d5=_d5/_G5;this._e5=_e5/_G5;this._f5=_f5/_G5;this._g5=_g5/_G5;this._h5=_h5/_G5;this._m5=_t5;this._n5=_u5;this._o5=_v5;}}registerProcessor("lo-shelf-processor",_L5);class _M5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _I5=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",
defaultValue:Math.min(500.0,_I5),minValue:10.0,maxValue:_I5},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_34){super();this._N3();const _44=_34.outputChannelCount[0];this._d5=0;this._e5=0;this._f5=0;this._g5=0;this._h5=0;this._i5=new Float32Array(_44);this._j5=new Float32Array(_44);this._k5=new Float32Array(_44);this._l5=new Float32Array(_44);this._J5=-1;this._n5=-1;}process(_R3,_S3,parameters){const input=_R3[0];const output=_S3[0];const bypass=parameters.bypass;
const cutoff=parameters.cutoff;const q=parameters.q;const _p5=(cutoff.length===1&&q.length===1);if(_p5)this._q5(cutoff[0],q[0]);for(let _T3=0;_T3<input.length;++_T3){const _U3=input[_T3];const __3=output[_T3];for(let _V3=0;_V3<_U3.length;++_V3){if(_p5===!1){const _T3=(cutoff[_V3]!==undefined)?cutoff[_V3]:cutoff[0];const _r5=(q[_V3]!==undefined)?q[_V3]:q[0];this._q5(_T3,_r5);}const _s5=this._f5*_U3[_V3]+this._g5*this._i5[_T3]+this._h5*this._j5[_T3]-this._d5*this._k5[_T3]-this._e5*this._l5[_T3];this._j5[_T3]=this._i5[_T3];
this._i5[_T3]=_U3[_V3];this._l5[_T3]=this._k5[_T3];this._k5[_T3]=_s5;const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];__3[_V3]=(_W3>0)?_U3[_V3]:_s5;}}return this._O3;}_q5(_K5,_u5){if(_K5===this._J5&&_u5===this._n5)return;const _w5=2*Math.PI*_K5/sampleRate;const alpha=Math.sin(_w5)/(2*_u5);const _x5=Math.cos(_w5);const _G5=1+alpha;const _d5=-2*_x5;const _e5=1-alpha;const _f5=(1-_x5)/2;const _g5=1-_x5;const _h5=(1-_x5)/2;this._d5=_d5/_G5;this._e5=_e5/_G5;this._f5=_f5/_G5;this._g5=_g5/_G5;this._h5=_h5/_G5;
this._J5=_K5;this._n5=_u5;}}registerProcessor("lpf2-processor",_M5);class _N5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _c5=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_c5),minValue:10.0,maxValue:_c5},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_34){
super();this._N3();const _44=_34.outputChannelCount[0];this._d5=0;this._e5=0;this._f5=0;this._g5=0;this._h5=0;this._i5=new Float32Array(_44);this._j5=new Float32Array(_44);this._k5=new Float32Array(_44);this._l5=new Float32Array(_44);this._m5=-1;this._n5=-1;this._o5=-1;}process(_R3,_S3,parameters){const input=_R3[0];const output=_S3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _p5=(freq.length===1&&q.length===1&&gain.length===1);if(_p5)this._q5(freq[0],
q[0],gain[0]);for(let _T3=0;_T3<input.length;++_T3){const _U3=input[_T3];const __3=output[_T3];for(let _V3=0;_V3<_U3.length;++_V3){if(_p5===!1){const _74=(freq[_V3]!==undefined)?freq[_V3]:freq[0];const _r5=(q[_V3]!==undefined)?q[_V3]:q[0];const _04=(gain[_V3]!==undefined)?gain[_V3]:gain[0];this._q5(_74,_r5,_04);}const _s5=this._f5*_U3[_V3]+this._g5*this._i5[_T3]+this._h5*this._j5[_T3]-this._d5*this._k5[_T3]-this._e5*this._l5[_T3];this._j5[_T3]=this._i5[_T3];this._i5[_T3]=_U3[_V3];this._l5[_T3]=this._k5[_T3];
this._k5[_T3]=_s5;const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];__3[_V3]=(_W3>0)?_U3[_V3]:_s5;}}return this._O3;}_q5(_t5,_u5,_v5){if(_t5===this._m5&&_u5===this._n5&&_v5===this._o5)return;const _w5=2*Math.PI*_t5/sampleRate;const _x5=Math.cos(_w5);const _y5=Math.sqrt(_v5);const alpha=Math.sin(_w5)/(2*_u5);const _O5=alpha/_y5;const _P5=alpha*_y5;const _G5=1+_O5;const _d5=-2*_x5;const _e5=1-_O5;const _f5=1+_P5;const _g5=_d5;const _h5=1-_P5;this._d5=_d5/_G5;this._e5=_e5/_G5;this._f5=_f5/_G5;this._g5=_g5/_G5;
this._h5=_h5/_G5;this._m5=_t5;this._n5=_u5;this._o5=_v5;}}registerProcessor("peak-eq-processor",_N5);class _Q5{constructor(_R5){this._S5=0;this._T5=0;this.feedback=0;this._U5=0;this.buffer=new Float32Array(_R5);this._V5=0;}process(_Z4){const out=this.buffer[this._V5];this._U5=(this._U5*this._S5)+(out*this._T5);this.buffer[this._V5]=_Z4+(this._U5*this.feedback);++this._V5;this._V5%=this.buffer.length;return out;}_W5(_X5){this.feedback=Math.min(Math.max(0,_X5),1);}_Y5(_Z5){this._S5=Math.min(Math.max(0,
_Z5),1);this._T5=1-this._S5;}}class __5{constructor(_R5){this.feedback=0;this.buffer=new Float32Array(_R5);this._V5=0;}process(_Z4){const out=this.buffer[this._V5];this.buffer[this._V5]=_Z4+(out*this.feedback);++this._V5;this._V5%=this.buffer.length;return(out-_Z4);}_W5(_X5){this.feedback=Math.min(Math.max(0,_X5),1);}}class _06 extends AudioWorkletProcessor{static _16=8;static _26=4;static _36=0.015;static _46=0.4;static _56=0.28;static _66=0.7;static _76=[1116,1188,1277,1356,1422,1491,1557,1617];static _86=[1139,
1211,1300,1379,1445,1514,1580,1640];static _96=[556,441,341,225];static _a6=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_34){super();this._N3();const _44=_34.outputChannelCount[0];
this._b6=-1;this._c6=-1;this._d6=new Array(_44);this._e6=new Array(_44);const _f6=[_06._76,_06._86];const _g6=[_06._96,_06._a6];for(let _T3=0;_T3<_44;++_T3){this._d6[_T3]=new Array(_06._16);this._e6[_T3]=new Array(_06._26);for(let _h6=0;_h6<_06._16;++_h6)this._d6[_T3][_h6]=new _Q5(_f6[_T3%_f6.length][_h6]);for(let _h6=0;_h6<_06._26;++_h6)this._e6[_T3][_h6]=new __5(_g6[_T3%_g6.length][_h6]);}this._i6(0.5);this._Y5(0.5);for(let _T3=0;_T3<_44;++_T3)for(let _h6=0;_h6<_06._26;++_h6)this._e6[_T3][_h6]._W5(0.5);}process(_R3,
_S3,parameters){const input=_R3[0];const output=_S3[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let _T3=0;_T3<input.length;++_T3){const _U3=input[_T3];const __3=output[_T3];for(let _j6=0;_j6<_U3.length;++_j6){const _V3=(size[_j6]!==undefined)?size[_j6]:size[0];const _k6=(damp[_j6]!==undefined)?damp[_j6]:damp[0];this._i6(_V3);this._Y5(_k6);__3[_j6]=_U3[_j6];let out=0;const _84=_U3[_j6]*_06._36;for(let _h6=0;_h6<_06._16;++_h6)out+=this._d6[_T3][_h6].process(_84);
for(let _h6=0;_h6<_06._26;++_h6)out=this._e6[_T3][_h6].process(out);const _W3=(bypass[_j6]!==undefined)?bypass[_j6]:bypass[0];if(_W3>0.0){continue;}const _a4=(mix[_j6]!==undefined)?mix[_j6]:mix[0];__3[_j6]*=(1-_a4);__3[_j6]+=(out*_a4);}}return this._O3;}_i6(_R5){if(_R5===this._b6)return;const size=(_R5*_06._56)+_06._66;for(let _T3=0;_T3<this._d6.length;++_T3)for(let _h6=0;_h6<_06._16;++_h6)this._d6[_T3][_h6]._W5(size);this._b6=_R5;}_Y5(_Z5){if(_Z5===this._c6)return;const damp=_Z5*_06._46;for(let _T3=0;_T3<this._d6.length;
++_T3)for(let _h6=0;_h6<_06._16;++_h6)this._d6[_T3][_h6]._Y5(damp);this._c6=_Z5;}}registerProcessor("reverb1-processor",_06);class _l6 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,
minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_34){super();this._N3();const _44=_34.outputChannelCount[0];this._m6=new Array(_44).fill(1.0);this._n6=new Array(_44).fill(0.0);this._o6=new Array(_44).fill(_p6._q6._r6);this._s6=new Array(_44);for(let _T3=0;_T3<_44;++_T3){this._s6[_T3]=new _t6();this._s6[_T3]._u6(sampleRate);this._s6[_T3]._v6(this._m6[_T3]);this._s6[_T3]._w6(this._o6[_T3]);if(_T3%2===1){this._s6[_T3]._x6(this._n6[_T3]);
}}}process(_R3,_S3,parameters){const input=_R3[0];const output=_S3[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _T3=0;_T3<input.length;++_T3){const _U3=input[_T3];const __3=output[_T3];for(let _V3=0;_V3<_U3.length;++_V3){__3[_V3]=_U3[_V3];const _94=(rate[_V3]!==undefined)?rate[_V3]:rate[0];const _y6=(offset[_V3]!==undefined)?offset[_V3]:offset[0];const _z6=(shape[_V3]!==undefined)?shape[_V3]:shape[0];
this._A6(_T3,_94,_y6,_z6);const _B6=this._s6[_T3]._Q4();const _W3=(bypass[_V3]!==undefined)?bypass[_V3]:bypass[0];if(_W3>0.0){continue;}const _h6=(intensity[_V3]!==undefined)?intensity[_V3]:intensity[0];const out=_U3[_V3]*_B6*_h6;__3[_V3]*=(1.0-_h6);__3[_V3]+=out;}}return this._O3;}_A6(_S4,_C6,_D6,_E6){if(_C6!==this._m6[_S4]){this._s6[_S4]._v6(_C6);this._m6[_S4]=_C6;}if(_D6!==this._n6[_S4]){if(_S4%2===1){this._s6[_S4]._x6(_D6);}this._n6[_S4]=_D6;}if(_E6!==this._o6[_S4]){this._s6[_S4]._w6(_E6);this._o6[_S4]=_E6;
}}}registerProcessor("tremolo-processor",_l6);function _p6(){}_p6._q6={_r6:0,_F6:1,_G6:2,_H6:3,_I6:4,_J6:5};_p6._K6=function(_L6){return 1.0-_L6;};_p6._M6=function(_L6){return _L6;};_p6._N6=function(_L6){return 0.5*(Math.sin((_L6*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_p6._O6=function(_L6){if(_L6<0.5){return 0.0;}return 1.0;};_p6._P6=function(_L6){if(_L6<0.5){return 2.0*_L6;}return 2.0-(2.0*_L6);};_p6._Q6=[_p6._K6,_p6._M6,_p6._N6,_p6._O6,_p6._P6];_R6._S6=512;_R6._T6=1.0/_R6._S6;function _R6(_U6){this.data=new Float32Array(_R6._S6);
for(let _h6=0;_h6<_R6._S6;++_h6){this.data[_h6]=_U6(_h6*_R6._T6);}}_R6.prototype._Q4=function(_L6){_L6=Math.max(0.0,_L6);_L6=Math.min(_L6,1.0);const _V6=_L6*_R6._S6;const _W6=~~_V6;const _X6=_V6-_W6;let _U4=_W6;let _V4=_U4+1;if(_U4>=_R6._S6){_U4-=_R6._S6;}if(_V4>=_R6._S6){_V4-=_R6._S6;}const _X4=this.data[_U4];const _Y4=this.data[_V4];return _X4+(_Y4-_X4)*_X6;};_t6._Y6=[];_t6._Z6=!1;_t6.__6=0.0;_t6._c5=20.0;function _t6(){this._07=48000;this.shape=_p6._q6._G6;this.freq=1.0;this._17=0.0;this._T6=0.0;this._27=0.0;
if(_t6._Z6==true){return;}for(let _h6=0;_h6<_p6._q6._J6;++_h6){_t6._Y6[_h6]=new _R6(_p6._Q6[_h6]);}_t6._Z6=true;}_t6._37=function(){return(_t6._Z6==!0);};_t6.prototype._u6=function(_47){this._07=_47;this._57();};_t6.prototype._v6=function(_t5){_t5=Math.max(_t6.__6,_t5);_t5=Math.min(_t5,_t6._c5);this.freq=_t5;this._57();};_t6.prototype._x6=function(_D6){_D6=Math.max(0.0,_D6);_D6=Math.min(_D6,1.0);const _67=_D6-this._27;this._27=_D6;this._17+=_67;while(this._17>=1.0){this._17-=1.0;}while(this._17<0.0){
this._17+=1.0;}};_t6.prototype._w6=function(_E6){_E6=Math.max(0,_E6);_E6=Math.min(_E6,_p6._q6._J6-1);this.shape=_E6;};_t6.prototype._Q4=function(){const _77=_t6._Y6[this.shape]._Q4(this._17);this._17+=this._T6;while(this._17>=1.0){this._17-=1.0;}return _77;};_t6.prototype._57=function(){this._T6=this.freq/this._07;};