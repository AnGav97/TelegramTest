AudioWorkletProcessor.prototype._81=function(){this._91=true;this.port.onmessage=(_a1)=>{if(_a1.data==="kill")this._91=false;};};class _b1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._81();}process(_c1,_d1,parameters){const input=_c1[0];const bypass=parameters.bypass;for(let _e1=0;_e1<input.length;++_e1){const _f1=input[_e1];for(let _g1=0;_g1<_f1.length;++_g1){const _h1=(bypass[_g1]!==undefined)?bypass[_g1]:bypass[0];
_d1[_h1][_e1][_g1]=_f1[_g1];}}return this._91;}}class _i1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._81();}process(_c1,_d1,parameters){const _j1=_c1[0];const _k1=_c1[1];const output=_d1[0];const gain=parameters.gain;for(let _e1=0;_e1<_k1.length;++_e1){const _f1=_k1[_e1];const _l1=output[_e1];for(let _g1=0;_g1<_f1.length;++_g1)_l1[_g1]=_f1[_g1];}for(let _e1=0;_e1<_j1.length;++_e1){const _f1=_j1[_e1];
const _l1=output[_e1];for(let _g1=0;_g1<_f1.length;++_g1){const _m1=(gain[_g1]!==undefined)?gain[_g1]:gain[0];_l1[_g1]+=_f1[_g1]*_m1;}}return this._91;}}registerProcessor("audio-bus-input",_b1);registerProcessor("audio-bus-output",_i1);class _n1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,
minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _o1=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_p1){super();this._81();const _q1=_p1.outputChannelCount[0];this._r1=new Float32Array(_q1);this._s1=new Uint32Array(_q1);}process(_c1,_d1,parameters){const input=_c1[0];const output=_d1[0];const bypass=parameters.bypass;
const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let _e1=0;_e1<input.length;++_e1){const _f1=input[_e1];const _l1=output[_e1];for(let _g1=0;_g1<_f1.length;++_g1){_l1[_g1]=_f1[_g1];if(this._s1[_e1]===0)this._r1[_e1]=_f1[_g1];const _t1=(factor[_g1]!==undefined)?factor[_g1]:factor[0];++this._s1[_e1];this._s1[_e1]%=_t1;const _h1=(bypass[_g1]!==undefined)?bypass[_g1]:bypass[0];if(_h1>0.0){continue;}let _u1=this._r1[_e1];const _m1=(gain[_g1]!==undefined)?gain[_g1]:gain[0];
_u1*=_m1;_u1=Math.max(Math.min(_u1,1.0),-1.0);const _v1=(resolution[_g1]!==undefined)?resolution[_g1]:resolution[0];const max=(_u1>0.0)?_n1._o1[_v1]-1:_n1._o1[_v1];_u1=Math.round(_u1*max)/max;const _w1=(mix[_g1]!==undefined)?mix[_g1]:mix[0];_l1[_g1]*=(1.0-_w1);_l1[_g1]+=(_u1*_w1);}}return this._91;}}registerProcessor("bitcrusher-processor",_n1);class _x1{constructor(_y1=1e-3){this.setTime(_y1);}setTime(_y1){this._z1=Math.exp(-1/(_y1*sampleRate));}process(_A1,_B1){return _A1+this._z1*(_B1-_A1);}}class _C1{
constructor(_D1,_E1){this._F1=new _x1(_D1);this._G1=new _x1(_E1);this._H1=_D1;this._I1=_E1;}_J1(_y1){if(_y1===this._H1)return;this._F1.setTime(_y1);this._H1=_y1;}_K1(_y1){if(_y1===this._I1)return;this._G1.setTime(_y1);this._I1=_y1;}process(_A1,_B1){if(_A1>_B1)return this._F1.process(_A1,_B1);else return this._G1.process(_A1,_B1);}}class _L1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",
defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_M1){super();this._81();const _F1=_L1.parameterDescriptors.find(_N1=>_N1.name==="attack");
const _G1=_L1.parameterDescriptors.find(_N1=>_N1.name==="release");this._O1=new _C1(_F1.defaultValue,_G1.defaultValue);this._P1=0;}process(_Q1,_R1,_S1){const input=_Q1[0];const output=_R1[0];const bypass=_S1.bypass;const ingain=_S1.ingain;const outgain=_S1.outgain;const threshold=_S1.threshold;const ratio=_S1.ratio;const attack=_S1.attack;const release=_S1.release;if(input.length===0)return this._91;for(let _g1=0;_g1<input[0].length;++_g1){let _T1=input.map(_U1=>_U1[_g1]);output.forEach((_U1,_V1)=>{_U1[_g1]=_T1[_V1];
});const _W1=(ingain[_g1]!==undefined)?ingain[_g1]:ingain[0];_T1=_T1.map(_X1=>_X1*=_W1);const rect=_T1.map(_X1=>Math.abs(_X1));const max=Math.max(...rect);const _Y1=_Z1(max);const __1=(threshold[_g1]!==undefined)?threshold[_g1]:threshold[0];const _02=_Z1(__1);const _12=Math.max(0,_Y1-_02);const _F1=(attack[_g1]!==undefined)?attack[_g1]:attack[0];const _G1=(release[_g1]!==undefined)?release[_g1]:release[0];this._O1._J1(_F1);this._O1._K1(_G1);this._P1=this._O1.process(_12,this._P1);const _h1=(bypass[_g1]!==undefined)?bypass[_g1]:bypass[0];
if(_h1>0)continue;const _v1=(ratio[_g1]!==undefined)?ratio[_g1]:ratio[0];const _22=(this._P1/_v1)-this._P1;const _m1=_32(_22);_T1=_T1.map(_X1=>_X1*=_m1);const _42=(outgain[_g1]!==undefined)?outgain[_g1]:outgain[0];_T1=_T1.map(_X1=>_X1*=_42);output.forEach((_U1,_V1)=>{_U1[_g1]=_T1[_V1];});}return this._91;}}function _Z1(_52){return 20*Math.log10(_52);}function _32(_52){return Math.pow(10,_52/20);}registerProcessor("compressor-processor",_L1);class _62 extends AudioWorkletProcessor{static _72=5.0;static get parameterDescriptors(){
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_62._72},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_p1){super();this._81();const _q1=_p1.outputChannelCount[0];const _82=(_62._72*sampleRate)+1;this.buffer=new Array(_q1);this._92=new Uint32Array(_q1);for(let _e1=0;
_e1<_q1;++_e1)this.buffer[_e1]=new Float32Array(_82);}process(_c1,_d1,parameters){const input=_c1[0];const output=_d1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let _e1=0;_e1<input.length;++_e1){const _f1=input[_e1];const _l1=output[_e1];for(let _g1=0;_g1<_f1.length;++_g1){_l1[_g1]=_f1[_g1];const __1=(time[_g1]!==undefined)?time[_g1]:time[0];const _a2=this._b2(_e1,__1);const _t1=(feedback[_g1]!==undefined)?feedback[_g1]:feedback[0];
const _c2=_f1[_g1]+(_a2*_t1);this.write(_e1,_c2);const _h1=(bypass[_g1]!==undefined)?bypass[_g1]:bypass[0];if(_h1>0.0){continue;}const _w1=(mix[_g1]!==undefined)?mix[_g1]:mix[0];_l1[_g1]*=(1-_w1);_l1[_g1]+=(_a2*_w1);}}return this._91;}_b2(_d2,_y1){const _e2=_y1*sampleRate;let _f2=(this._92[_d2]-~~_e2);let _g2=(_f2-1);while(_f2<0)_f2+=this.buffer[_d2].length;while(_g2<0)_g2+=this.buffer[_d2].length;const _h2=_e2-~~_e2;const _i2=this.buffer[_d2][_f2];const _j2=this.buffer[_d2][_g2];return _i2+(_j2-_i2)*_h2;}
write(_d2,_k2){++this._92[_d2];this._92[_d2]%=this.buffer[_d2].length;this.buffer[_d2][this._92[_d2]]=_k2;}}registerProcessor("delay-processor",_62);class _l2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._81();}process(_m2,_n2,_o2){const input=_m2[0];const _p2=_n2[0];const _q2=_n2[1];for(let _e1=0;_e1<input.length;++_e1){const _f1=input[_e1];const _r2=_p2[_e1];const _s2=_q2[_e1];for(let _g1=0;_g1<_f1.length;++_g1){_r2[_g1]=_f1[_g1];_s2[_g1]=_f1[_g1];}}return this._91;
}}class _t2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._81();}process(_m2,_n2,_o2){const _j1=_m2[0];const _k1=_m2[1];const output=_n2[0];const bypass=_o2.bypass;for(let _e1=0;_e1<_k1.length;++_e1){const _u2=_j1[_e1];const _v2=_k1[_e1];const _l1=output[_e1];for(let _g1=0;_g1<_u2.length;++_g1){const _h1=(bypass[_g1]!==undefined)?bypass[_g1]:bypass[0];if(_h1>0){_l1[_g1]=_v2[_g1];}else {
_l1[_g1]=_u2[_g1];}}}return this._91;}}registerProcessor("eq-input",_l2);registerProcessor("eq-output",_t2);class _w2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._81();}process(_c1,_d1,parameters){const input=_c1[0];const output=_d1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let _e1=0;_e1<input.length;
++_e1){const _f1=input[_e1];const _l1=output[_e1];for(let _g1=0;_g1<_f1.length;++_g1){_l1[_g1]=_f1[_g1];const _h1=(bypass[_g1]!==undefined)?bypass[_g1]:bypass[0];if(_h1>0.0){continue;}const _m1=(gain[_g1]!==undefined)?gain[_g1]:gain[0];_l1[_g1]*=_m1;}}return this._91;}}registerProcessor("gain-processor",_w2);class _x2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _y2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",
defaultValue:Math.min(5000.0,_y2),minValue:10.0,maxValue:_y2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_p1){super();this._81();const _q1=_p1.outputChannelCount[0];this._z2=0;this._A2=0;this._B2=0;this._C2=0;this._D2=0;this._E2=new Float32Array(_q1);this._F2=new Float32Array(_q1);this._G2=new Float32Array(_q1);this._H2=new Float32Array(_q1);this._I2=-1;this._J2=-1;this._K2=-1;}process(_c1,
_d1,parameters){const input=_c1[0];const output=_d1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _L2=(freq.length===1&&q.length===1&&gain.length===1);if(_L2)this._M2(freq[0],q[0],gain[0]);for(let _e1=0;_e1<input.length;++_e1){const _f1=input[_e1];const _l1=output[_e1];for(let _g1=0;_g1<_f1.length;++_g1){if(_L2===!1){const _t1=(freq[_g1]!==undefined)?freq[_g1]:freq[0];const _N2=(q[_g1]!==undefined)?q[_g1]:q[0];const _m1=(gain[_g1]!==undefined)?gain[_g1]:gain[0];
this._M2(_t1,_N2,_m1);}const _O2=this._B2*_f1[_g1]+this._C2*this._E2[_e1]+this._D2*this._F2[_e1]-this._z2*this._G2[_e1]-this._A2*this._H2[_e1];this._F2[_e1]=this._E2[_e1];this._E2[_e1]=_f1[_g1];this._H2[_e1]=this._G2[_e1];this._G2[_e1]=_O2;const _h1=(bypass[_g1]!==undefined)?bypass[_g1]:bypass[0];_l1[_g1]=(_h1>0)?_f1[_g1]:_O2;}}return this._91;}_M2(_P2,_Q2,_R2){if(_P2===this._I2&&_Q2===this._J2&&_R2===this._K2)return;const _S2=2*Math.PI*_P2/sampleRate;const _T2=Math.cos(_S2);const _U2=Math.sqrt(_R2);const _V2=_U2+1;
const _W2=_U2-1;const _X2=_V2*_T2;const _Y2=_W2*_T2;const _Z2=_V2-_Y2;const __2=_V2+_Y2;const alpha=Math.sin(_S2)/(2*_Q2);const _03=(2*Math.sqrt(_U2)*alpha);const _13=_Z2+_03;const _z2=2*(_W2-_X2);const _A2=_Z2-_03;const _B2=_U2*(__2+_03);const _C2=-2*_U2*(_W2+_X2);const _D2=_U2*(__2-_03);this._z2=_z2/_13;this._A2=_A2/_13;this._B2=_B2/_13;this._C2=_C2/_13;this._D2=_D2/_13;this._I2=_P2;this._J2=_Q2;this._K2=_R2;}}registerProcessor("hi-shelf-processor",_x2);class _23 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _33=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_33),minValue:10.0,maxValue:_33},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_p1){super();this._81();const _q1=_p1.outputChannelCount[0];this._z2=0;this._A2=0;this._B2=0;this._C2=0;this._D2=0;this._E2=new Float32Array(_q1);this._F2=new Float32Array(_q1);this._G2=new Float32Array(_q1);
this._H2=new Float32Array(_q1);this._43=-1;this._J2=-1;}process(_c1,_d1,parameters){const input=_c1[0];const output=_d1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _L2=(cutoff.length===1&&q.length===1);if(_L2)this._M2(cutoff[0],q[0]);for(let _e1=0;_e1<input.length;++_e1){const _f1=input[_e1];const _l1=output[_e1];for(let _g1=0;_g1<_f1.length;++_g1){if(_L2===!1){const _e1=(cutoff[_g1]!==undefined)?cutoff[_g1]:cutoff[0];const _N2=(q[_g1]!==undefined)?q[_g1]:q[0];
this._M2(_e1,_N2);}const _O2=this._B2*_f1[_g1]+this._C2*this._E2[_e1]+this._D2*this._F2[_e1]-this._z2*this._G2[_e1]-this._A2*this._H2[_e1];this._F2[_e1]=this._E2[_e1];this._E2[_e1]=_f1[_g1];this._H2[_e1]=this._G2[_e1];this._G2[_e1]=_O2;const _h1=(bypass[_g1]!==undefined)?bypass[_g1]:bypass[0];_l1[_g1]=(_h1>0)?_f1[_g1]:_O2;}}return this._91;}_M2(_53,_Q2){if(_53===this._43&&_Q2===this._J2)return;const _S2=2*Math.PI*_53/sampleRate;const alpha=Math.sin(_S2)/(2*_Q2);const _T2=Math.cos(_S2);const _13=1+alpha;
const _z2=-2*_T2;const _A2=1-alpha;const _B2=(1+_T2)/2;const _C2=-1-_T2;const _D2=(1+_T2)/2;this._z2=_z2/_13;this._A2=_A2/_13;this._B2=_B2/_13;this._C2=_C2/_13;this._D2=_D2/_13;this._43=_53;this._J2=_Q2;}}registerProcessor("hpf2-processor",_23);class _63 extends AudioWorkletProcessor{static get parameterDescriptors(){const _y2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_y2),minValue:10.0,
maxValue:_y2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_p1){super();this._81();const _q1=_p1.outputChannelCount[0];this._z2=0;this._A2=0;this._B2=0;this._C2=0;this._D2=0;this._E2=new Float32Array(_q1);this._F2=new Float32Array(_q1);this._G2=new Float32Array(_q1);this._H2=new Float32Array(_q1);this._I2=-1;this._J2=-1;this._K2=-1;}process(_c1,_d1,parameters){const input=_c1[0];const output=_d1[0];
const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _L2=(freq.length===1&&q.length===1&&gain.length===1);if(_L2)this._M2(freq[0],q[0],gain[0]);for(let _e1=0;_e1<input.length;++_e1){const _f1=input[_e1];const _l1=output[_e1];for(let _g1=0;_g1<_f1.length;++_g1){if(_L2===!1){const _t1=(freq[_g1]!==undefined)?freq[_g1]:freq[0];const _N2=(q[_g1]!==undefined)?q[_g1]:q[0];const _m1=(gain[_g1]!==undefined)?gain[_g1]:gain[0];this._M2(_t1,_N2,_m1);}const _O2=this._B2*_f1[_g1]+this._C2*this._E2[_e1]+this._D2*this._F2[_e1]-this._z2*this._G2[_e1]-this._A2*this._H2[_e1];
this._F2[_e1]=this._E2[_e1];this._E2[_e1]=_f1[_g1];this._H2[_e1]=this._G2[_e1];this._G2[_e1]=_O2;const _h1=(bypass[_g1]!==undefined)?bypass[_g1]:bypass[0];_l1[_g1]=(_h1>0)?_f1[_g1]:_O2;}}return this._91;}_M2(_P2,_Q2,_R2){if(_P2===this._I2&&_Q2===this._J2&&_R2===this._K2)return;const _S2=2*Math.PI*_P2/sampleRate;const _T2=Math.cos(_S2);const _U2=Math.sqrt(_R2);const _V2=_U2+1;const _W2=_U2-1;const _X2=_V2*_T2;const _Y2=_W2*_T2;const _Z2=_V2-_Y2;const __2=_V2+_Y2;const alpha=Math.sin(_S2)/(2*_Q2);const _03=(2*Math.sqrt(_U2)*alpha);
const _13=__2+_03;const _z2=-2*(_W2+_X2);const _A2=__2-_03;const _B2=_U2*(_Z2+_03);const _C2=2*_U2*(_W2-_X2);const _D2=_U2*(_Z2-_03);this._z2=_z2/_13;this._A2=_A2/_13;this._B2=_B2/_13;this._C2=_C2/_13;this._D2=_D2/_13;this._I2=_P2;this._J2=_Q2;this._K2=_R2;}}registerProcessor("lo-shelf-processor",_63);class _73 extends AudioWorkletProcessor{static get parameterDescriptors(){const _33=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",
defaultValue:Math.min(500.0,_33),minValue:10.0,maxValue:_33},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_p1){super();this._81();const _q1=_p1.outputChannelCount[0];this._z2=0;this._A2=0;this._B2=0;this._C2=0;this._D2=0;this._E2=new Float32Array(_q1);this._F2=new Float32Array(_q1);this._G2=new Float32Array(_q1);this._H2=new Float32Array(_q1);this._43=-1;this._J2=-1;}process(_c1,_d1,parameters){const input=_c1[0];const output=_d1[0];const bypass=parameters.bypass;
const cutoff=parameters.cutoff;const q=parameters.q;const _L2=(cutoff.length===1&&q.length===1);if(_L2)this._M2(cutoff[0],q[0]);for(let _e1=0;_e1<input.length;++_e1){const _f1=input[_e1];const _l1=output[_e1];for(let _g1=0;_g1<_f1.length;++_g1){if(_L2===!1){const _e1=(cutoff[_g1]!==undefined)?cutoff[_g1]:cutoff[0];const _N2=(q[_g1]!==undefined)?q[_g1]:q[0];this._M2(_e1,_N2);}const _O2=this._B2*_f1[_g1]+this._C2*this._E2[_e1]+this._D2*this._F2[_e1]-this._z2*this._G2[_e1]-this._A2*this._H2[_e1];this._F2[_e1]=this._E2[_e1];
this._E2[_e1]=_f1[_g1];this._H2[_e1]=this._G2[_e1];this._G2[_e1]=_O2;const _h1=(bypass[_g1]!==undefined)?bypass[_g1]:bypass[0];_l1[_g1]=(_h1>0)?_f1[_g1]:_O2;}}return this._91;}_M2(_53,_Q2){if(_53===this._43&&_Q2===this._J2)return;const _S2=2*Math.PI*_53/sampleRate;const alpha=Math.sin(_S2)/(2*_Q2);const _T2=Math.cos(_S2);const _13=1+alpha;const _z2=-2*_T2;const _A2=1-alpha;const _B2=(1-_T2)/2;const _C2=1-_T2;const _D2=(1-_T2)/2;this._z2=_z2/_13;this._A2=_A2/_13;this._B2=_B2/_13;this._C2=_C2/_13;this._D2=_D2/_13;
this._43=_53;this._J2=_Q2;}}registerProcessor("lpf2-processor",_73);class _83 extends AudioWorkletProcessor{static get parameterDescriptors(){const _y2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_y2),minValue:10.0,maxValue:_y2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_p1){
super();this._81();const _q1=_p1.outputChannelCount[0];this._z2=0;this._A2=0;this._B2=0;this._C2=0;this._D2=0;this._E2=new Float32Array(_q1);this._F2=new Float32Array(_q1);this._G2=new Float32Array(_q1);this._H2=new Float32Array(_q1);this._I2=-1;this._J2=-1;this._K2=-1;}process(_c1,_d1,parameters){const input=_c1[0];const output=_d1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _L2=(freq.length===1&&q.length===1&&gain.length===1);if(_L2)this._M2(freq[0],
q[0],gain[0]);for(let _e1=0;_e1<input.length;++_e1){const _f1=input[_e1];const _l1=output[_e1];for(let _g1=0;_g1<_f1.length;++_g1){if(_L2===!1){const _t1=(freq[_g1]!==undefined)?freq[_g1]:freq[0];const _N2=(q[_g1]!==undefined)?q[_g1]:q[0];const _m1=(gain[_g1]!==undefined)?gain[_g1]:gain[0];this._M2(_t1,_N2,_m1);}const _O2=this._B2*_f1[_g1]+this._C2*this._E2[_e1]+this._D2*this._F2[_e1]-this._z2*this._G2[_e1]-this._A2*this._H2[_e1];this._F2[_e1]=this._E2[_e1];this._E2[_e1]=_f1[_g1];this._H2[_e1]=this._G2[_e1];
this._G2[_e1]=_O2;const _h1=(bypass[_g1]!==undefined)?bypass[_g1]:bypass[0];_l1[_g1]=(_h1>0)?_f1[_g1]:_O2;}}return this._91;}_M2(_P2,_Q2,_R2){if(_P2===this._I2&&_Q2===this._J2&&_R2===this._K2)return;const _S2=2*Math.PI*_P2/sampleRate;const _T2=Math.cos(_S2);const _U2=Math.sqrt(_R2);const alpha=Math.sin(_S2)/(2*_Q2);const _93=alpha/_U2;const _a3=alpha*_U2;const _13=1+_93;const _z2=-2*_T2;const _A2=1-_93;const _B2=1+_a3;const _C2=_z2;const _D2=1-_a3;this._z2=_z2/_13;this._A2=_A2/_13;this._B2=_B2/_13;this._C2=_C2/_13;
this._D2=_D2/_13;this._I2=_P2;this._J2=_Q2;this._K2=_R2;}}registerProcessor("peak-eq-processor",_83);class _b3{constructor(_c3){this._d3=0;this._e3=0;this.feedback=0;this._f3=0;this.buffer=new Float32Array(_c3);this._g3=0;}process(_k2){const out=this.buffer[this._g3];this._f3=(this._f3*this._d3)+(out*this._e3);this.buffer[this._g3]=_k2+(this._f3*this.feedback);++this._g3;this._g3%=this.buffer.length;return out;}_h3(_i3){this.feedback=Math.min(Math.max(0,_i3),1);}_j3(_k3){this._d3=Math.min(Math.max(0,
_k3),1);this._e3=1-this._d3;}}class _l3{constructor(_c3){this.feedback=0;this.buffer=new Float32Array(_c3);this._g3=0;}process(_k2){const out=this.buffer[this._g3];this.buffer[this._g3]=_k2+(out*this.feedback);++this._g3;this._g3%=this.buffer.length;return(out-_k2);}_h3(_i3){this.feedback=Math.min(Math.max(0,_i3),1);}}class _m3 extends AudioWorkletProcessor{static _n3=8;static _o3=4;static _p3=0.015;static _q3=0.4;static _r3=0.28;static _s3=0.7;static _t3=[1116,1188,1277,1356,1422,1491,1557,1617];static _u3=[1139,
1211,1300,1379,1445,1514,1580,1640];static _v3=[556,441,341,225];static _w3=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_p1){super();this._81();const _q1=_p1.outputChannelCount[0];
this._x3=-1;this._y3=-1;this._z3=new Array(_q1);this._A3=new Array(_q1);const _B3=[_m3._t3,_m3._u3];const _C3=[_m3._v3,_m3._w3];for(let _e1=0;_e1<_q1;++_e1){this._z3[_e1]=new Array(_m3._n3);this._A3[_e1]=new Array(_m3._o3);for(let _D3=0;_D3<_m3._n3;++_D3)this._z3[_e1][_D3]=new _b3(_B3[_e1%_B3.length][_D3]);for(let _D3=0;_D3<_m3._o3;++_D3)this._A3[_e1][_D3]=new _l3(_C3[_e1%_C3.length][_D3]);}this._E3(0.5);this._j3(0.5);for(let _e1=0;_e1<_q1;++_e1)for(let _D3=0;_D3<_m3._o3;++_D3)this._A3[_e1][_D3]._h3(0.5);}process(_c1,
_d1,parameters){const input=_c1[0];const output=_d1[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let _e1=0;_e1<input.length;++_e1){const _f1=input[_e1];const _l1=output[_e1];for(let _F3=0;_F3<_f1.length;++_F3){const _g1=(size[_F3]!==undefined)?size[_F3]:size[0];const _G3=(damp[_F3]!==undefined)?damp[_F3]:damp[0];this._E3(_g1);this._j3(_G3);_l1[_F3]=_f1[_F3];let out=0;const _u1=_f1[_F3]*_m3._p3;for(let _D3=0;_D3<_m3._n3;++_D3)out+=this._z3[_e1][_D3].process(_u1);
for(let _D3=0;_D3<_m3._o3;++_D3)out=this._A3[_e1][_D3].process(out);const _h1=(bypass[_F3]!==undefined)?bypass[_F3]:bypass[0];if(_h1>0.0){continue;}const _w1=(mix[_F3]!==undefined)?mix[_F3]:mix[0];_l1[_F3]*=(1-_w1);_l1[_F3]+=(out*_w1);}}return this._91;}_E3(_c3){if(_c3===this._x3)return;const size=(_c3*_m3._r3)+_m3._s3;for(let _e1=0;_e1<this._z3.length;++_e1)for(let _D3=0;_D3<_m3._n3;++_D3)this._z3[_e1][_D3]._h3(size);this._x3=_c3;}_j3(_k3){if(_k3===this._y3)return;const damp=_k3*_m3._q3;for(let _e1=0;_e1<this._z3.length;
++_e1)for(let _D3=0;_D3<_m3._n3;++_D3)this._z3[_e1][_D3]._j3(damp);this._y3=_k3;}}registerProcessor("reverb1-processor",_m3);class _H3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,
minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_p1){super();this._81();const _q1=_p1.outputChannelCount[0];this._I3=new Array(_q1).fill(1.0);this._J3=new Array(_q1).fill(0.0);this._K3=new Array(_q1).fill(_L3._M3._N3);this._O3=new Array(_q1);for(let _e1=0;_e1<_q1;++_e1){this._O3[_e1]=new _P3();this._O3[_e1]._Q3(sampleRate);this._O3[_e1]._R3(this._I3[_e1]);this._O3[_e1]._S3(this._K3[_e1]);if(_e1%2===1){this._O3[_e1]._T3(this._J3[_e1]);
}}}process(_c1,_d1,parameters){const input=_c1[0];const output=_d1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let _e1=0;_e1<input.length;++_e1){const _f1=input[_e1];const _l1=output[_e1];for(let _g1=0;_g1<_f1.length;++_g1){_l1[_g1]=_f1[_g1];const _v1=(rate[_g1]!==undefined)?rate[_g1]:rate[0];const _U3=(offset[_g1]!==undefined)?offset[_g1]:offset[0];const _V3=(shape[_g1]!==undefined)?shape[_g1]:shape[0];
this._W3(_e1,_v1,_U3,_V3);const _X3=this._O3[_e1]._b2();const _h1=(bypass[_g1]!==undefined)?bypass[_g1]:bypass[0];if(_h1>0.0){continue;}const _D3=(intensity[_g1]!==undefined)?intensity[_g1]:intensity[0];const out=_f1[_g1]*_X3*_D3;_l1[_g1]*=(1.0-_D3);_l1[_g1]+=out;}}return this._91;}_W3(_d2,_Y3,_Z3,__3){if(_Y3!==this._I3[_d2]){this._O3[_d2]._R3(_Y3);this._I3[_d2]=_Y3;}if(_Z3!==this._J3[_d2]){if(_d2%2===1){this._O3[_d2]._T3(_Z3);}this._J3[_d2]=_Z3;}if(__3!==this._K3[_d2]){this._O3[_d2]._S3(__3);this._K3[_d2]=__3;
}}}registerProcessor("tremolo-processor",_H3);function _L3(){}_L3._M3={_N3:0,_04:1,_14:2,_24:3,_34:4,_44:5};_L3._54=function(_64){return 1.0-_64;};_L3._74=function(_64){return _64;};_L3._84=function(_64){return 0.5*(Math.sin((_64*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_L3._94=function(_64){if(_64<0.5){return 0.0;}return 1.0;};_L3._a4=function(_64){if(_64<0.5){return 2.0*_64;}return 2.0-(2.0*_64);};_L3._b4=[_L3._54,_L3._74,_L3._84,_L3._94,_L3._a4];_c4._d4=512;_c4._e4=1.0/_c4._d4;function _c4(_f4){this.data=new Float32Array(_c4._d4);
for(let _D3=0;_D3<_c4._d4;++_D3){this.data[_D3]=_f4(_D3*_c4._e4);}}_c4.prototype._b2=function(_64){_64=Math.max(0.0,_64);_64=Math.min(_64,1.0);const _g4=_64*_c4._d4;const _h4=~~_g4;const _i4=_g4-_h4;let _f2=_h4;let _g2=_f2+1;if(_f2>=_c4._d4){_f2-=_c4._d4;}if(_g2>=_c4._d4){_g2-=_c4._d4;}const _i2=this.data[_f2];const _j2=this.data[_g2];return _i2+(_j2-_i2)*_i4;};_P3._j4=[];_P3._k4=!1;_P3._l4=0.0;_P3._y2=20.0;function _P3(){this._m4=48000;this.shape=_L3._M3._14;this.freq=1.0;this._n4=0.0;this._e4=0.0;this._o4=0.0;
if(_P3._k4==true){return;}for(let _D3=0;_D3<_L3._M3._44;++_D3){_P3._j4[_D3]=new _c4(_L3._b4[_D3]);}_P3._k4=true;}_P3._p4=function(){return(_P3._k4==!0);};_P3.prototype._Q3=function(_q4){this._m4=_q4;this._r4();};_P3.prototype._R3=function(_P2){_P2=Math.max(_P3._l4,_P2);_P2=Math.min(_P2,_P3._y2);this.freq=_P2;this._r4();};_P3.prototype._T3=function(_Z3){_Z3=Math.max(0.0,_Z3);_Z3=Math.min(_Z3,1.0);const _s4=_Z3-this._o4;this._o4=_Z3;this._n4+=_s4;while(this._n4>=1.0){this._n4-=1.0;}while(this._n4<0.0){
this._n4+=1.0;}};_P3.prototype._S3=function(__3){__3=Math.max(0,__3);__3=Math.min(__3,_L3._M3._44-1);this.shape=__3;};_P3.prototype._b2=function(){const _t4=_P3._j4[this.shape]._b2(this._n4);this._n4+=this._e4;while(this._n4>=1.0){this._n4-=1.0;}return _t4;};_P3.prototype._r4=function(){this._e4=this.freq/this._m4;};